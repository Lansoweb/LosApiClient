<?php

namespace LosApiClient\Api;

use Zend\Http\Client;
use Zend\Http\Response as ZendResponse;
use Zend\Http\Headers;
use LosApiClient\Exception\RuntimeException;
use LosApiClient\Resource\Resource;
use Nocarrier\Hal;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-11-10 at 18:27:23.
 */
class ResponseTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Response
     */
    protected $object;

    public static $sampleJson = <<<JSON
        {
            "id": 1,
            "name": "test",
            "_links":{
                "self":{"href":"http:\/\/127.0.0.1\/2"},
                "prev":{"href":"http:\/\/127.0.0.1\/1"},
                "next":{"href":"http:\/\/127.0.0.1\/3"}
            },
            "_embedded":{
                "item":[
                    {
                        "_links":{
                            "self":{"href":"http:\/\/127.0.0.1\/"},
                            "next":{"href":"http:\/\/127.0.0.1\/3"}
                        },
                        "key": "value1"
                    },
                    {
                        "_links":{
                            "self":{"href":"http:\/\/127.0.0.1\/"},
                            "next":{"href":"http:\/\/127.0.0.1\/3"}
                        },
                        "key": "value2"
                    }
                ],
                "item2":[
                    {
                        "_links":{
                            "self":{"href":"http:\/\/127.0.0.1\/"},
                            "next":{"href":"http:\/\/127.0.0.1\/3"}
                        },
                        "key": "value1"
                    }
                ]
            }
        }
JSON;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers LosApiClient\Api\Response::__construct
     */
    public function testMustHaveContentType()
    {
        $http = new Client();
        $response = new ZendResponse();

        $this->setExpectedException(RuntimeException::class);
        $this->object = new Response($http, $response);
    }

    /**
     * @covers LosApiClient\Api\Response::__construct
     */
    public function testErrorResponse()
    {
        $http = new Client();
        $response = new ZendResponse();
        $headers = new Headers();
        $headers->addHeaderLine('Content-Type', 'application/json');
        $response->setHeaders($headers);
        $response->setStatusCode(500);

        $response->setContent('{
            "status": 500,
            "title": "Internal Error",
            "detail": "Sorry ..."
            }');

        $this->setExpectedException(RuntimeException::class);
        $this->object = new Response($http, $response);
    }

    /**
     * @covers LosApiClient\Api\Response::__construct
     */
    public function testAcceptJson()
    {
        $http = new Client();
        $response = new ZendResponse();
        $headers = new Headers();
        $headers->addHeaderLine('Content-Type', 'application/json');
        $response->setHeaders($headers);

        $response->setContent(static::$sampleJson);

        $this->object = new Response($http, $response);

        $content = $this->object->getContent();
        $this->assertInstanceOf(Resource::class, $content);
    }

    /**
     * @covers LosApiClient\Api\Response::__construct
     */
    public function testAcceptXml()
    {
        $http = new Client();
        $response = new ZendResponse();
        $headers = new Headers();
        $headers->addHeaderLine('Content-Type', 'application/xml');
        $response->setHeaders($headers);

        $hal = Hal::fromJson(static::$sampleJson, 10);
        $xml = $hal->asXml(true);

        $response->setContent($xml);

        $this->object = new Response($http, $response);

        $content = $this->object->getContent();
        $this->assertInstanceOf(Resource::class, $content);
    }

    /**
     * @covers LosApiClient\Api\Response::__construct
     */
    public function testNotAcceptInvalid()
    {
        $http = new Client();
        $response = new ZendResponse();
        $headers = new Headers();
        $headers->addHeaderLine('Content-Type', 'application/foo');
        $response->setHeaders($headers);

        $this->setExpectedException(RuntimeException::class);
        $this->object = new Response($http, $response);
    }

    /**
     * @covers LosApiClient\Api\Response::__construct
     */
    public function testAcceptComposedContentType()
    {
        $http = new Client();
        $response = new ZendResponse();
        $headers = new Headers();
        $headers->addHeaderLine('Content-Type', 'application/json; charset=UTF8');
        $response->setHeaders($headers);

        $response->setContent(static::$sampleJson);

        $this->object = new Response($http, $response);

        $content = $this->object->getContent();
        $this->assertInstanceOf(Resource::class, $content);
    }

    /**
     * @covers LosApiClient\Api\Response::__construct
     * @covers LosApiClient\Api\Response::getContent
     */
    public function testGetContent()
    {
        $http = new Client();
        $response = new ZendResponse();
        $headers = new Headers();
        $headers->addHeaderLine('Content-Type', 'application/json');
        $response->setHeaders($headers);
        $response->setContent(static::$sampleJson);

        $this->object = new Response($http, $response);

        $content = $this->object->getContent();
    }
}
